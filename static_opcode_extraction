from capstone import *
import pefile
import pandas as pd
import csv
import os
import subprocess
import zlib
import pickle
import lz4
import struct
import re
import time

def get_main_code_section(sections, base_of_code):
    addresses = []
    for section in sections:
        addresses.append(section.VirtualAddress)

    if base_of_code in addresses:
        return sections[addresses.index(base_of_code)]

    else:
        addresses.append(base_of_code)
        addresses.sort()
        if addresses.index(base_of_code) != 0:
            return sections[addresses.index(base_of_code) - 1]
        else:
            return None

def getObfuscation(malware_path):
    disasm = []
    mode = CS_MODE_32
    malware_file = pefile.PE(malware_path)
    f = open(malware_path,'rb')
    f.seek(-2, os.SEEK_END)
    dest_addr = f.tell()
    f.close()
    main_code = get_main_code_section(malware_file.sections, malware_file.OPTIONAL_HEADER.BaseOfCode)

    begin = main_code.PointerToRawData     # Beginning of code section
    end = dest_addr  #begin + main_code.SizeOfRawData     # #the end of the first continuous block of code
    if malware_file.OPTIONAL_HEADER.Magic == 0x20b:
        mode = CS_MODE_64
    disassembler = Cs(CS_ARCH_X86, mode)
    data = malware_file.get_memory_mapped_image()[begin:end]
    for instruction in disassembler.disasm(data, begin):
        last_address = int(instruction.address)
        last_size = instruction.size
        begin = max(int(last_address), begin) + last_size + 1
        if begin >= end:
            print("out")
            break
        if instruction.mnemonic != "int3": 
            disasm.append(instruction.mnemonic)
    return disasm

def write_staticoutput(disasm):
    dataSet = [d for d in disasm if not re.findall(r"(^[a-f,gs,0-9][abcdefsw,0-9]$)|(int3|\(bad\)|\.\.\.|Disassembly)|(^\d{1,2})|(^ud\d{1})",str(d))]
    with open('/content/gdrive/My Drive/opcodes.csv', 'a+', encoding="ISO-8859-1", newline='') as f:
        writer = csv.writer(f)
        writer.writerows([dataSet])

def get_netDisassembly(malware_path):
    newList = []
    opcodes = []
    opcodes.insert(0, malware_path.split("/")[-1])
    with open(malware_path, 'rt', encoding='ISO-8859-1') as f:
        data = f.read()
        items = [re.findall(r"IL_\d{4}:\s+\w+", data)]

    for element in items:
        newList += str(element).split(',')

    newList = [x.strip() for x in newList]

    for i,x in enumerate(newList):
        opcodes.append(str(x).split(":")[-1].strip("' ").strip("']")) 
    for op in opcodes:
      if malware_path in op:
        opcodes.remove(malware_path)
    return opcodes

def get_objDump(malware_path):
    mylines = [] 
    newList = []
    ops = []
    ops.insert(0, malware_path.split("/")[-1]) 
    with open(malware_path, 'rt') as f:
      for myline in f:             
          mylines.append(re.sub(r"[\n]*", "", str(myline).strip()))           
      mylines = [x for x in mylines if x]
      mylines = mylines[3:]
      for a in mylines:
          newList.append(re.sub(r'\w+:[^\t]*\t*([a-f0-9]{2}\s+)*', "", str(a)))
      for p in newList:
          if "(bad)" not in p or "int3" not in p:
            ops.append(str(p).split()[0]) 
    return ops

def write_objoutput(malware_path):
    file1 = str(malware_path).split("/")[-1]
    if str(file1).endswith(".bin") or str(file1).endswith(".exe"):
        output_file = str(file1).split(".")[0]+".txt"
    else:
        output_file = str(file1)+".txt"

    obj_output = open('/content/gdrive/My Drive/Test1/'+output_file, 'a')
    dumpObj = subprocess.Popen(["objdump", "-d", malware_path], stderr=subprocess.PIPE, stdout=obj_output)
    dumpObj.communicate()
    obj_output.close()
    objDump = get_objDump("/content/gdrive/My Drive/Test1/"+output_file) 
    objDump.insert(0, output_file)
    write_staticoutput(objDump)

def decompressUPX(output_file, malware_path):
    decompress = subprocess.Popen(["upx", "-d", "-o", "/content/gdrive/My Drive/Decompress_Net/"+output_file , malware_path], universal_newlines=True, stdout=subprocess.PIPE)
    unpack, err1 = decompress.communicate()
    disasm1 = getObfuscation("/content/gdrive/My Drive/Decompress_Net/"+output_file)
    if disasm1:
        disasm1.insert(0, output_file)
        write_staticoutput(disasm1)  
    else:
        write_objoutput(malware_path) 

def decompressNet(output_file, malware_path):
    out = "/content/gdrive/My Drive/Decompress_Net/"+ output_file
    mono = subprocess.Popen(["monodis", "--output=/content/gdrive/My Drive/Decompress_Net/"+ output_file, malware_path], universal_newlines=True, stdout=subprocess.PIPE)
    mono.communicate()
    netASM = get_netDisassembly(out)
    print(netASM)
    if netASM:
        write_staticoutput(netASM)
    else:
        write_objoutput(out)

def main():
    for root, dirs, files in os.walk("/content/gdrive/My Drive/21_Jan"):
        for file1 in sorted(files, key=lambda x: str(x)):
          try:
                guessExt = subprocess.Popen(["file", os.path.join(root, file1)], stderr=subprocess.PIPE, stdout=subprocess.PIPE)
                out, err = guessExt.communicate()
                malware_path = os.path.join(root, file1)
                if str(file1).endswith(".bin") or str(file1).endswith(".exe"):
                    output_file = str(file1).split(".")[0]
                else:
                    output_file = str(file1)

                if b"zlib" in out:
                    zlib_file = open(malware_path, 'rb').read()
                    str_object2 = zlib.decompress(zlib_file)
                    out = "/content/gdrive/My Drive/Decompress_Zlib/"+str(file1)
                    f = open(out, 'wb') #
                    f.write(str_object2)
                    f.close()

                    if os.path.getsize(out) > 0:
                          zlibF = open(out, 'rb').read()
                          if re.match( b"UPX", zlibF):
                            decompressUPX(str(file1), out)
                          elif re.match( b"Mono/.Net", zlibF):
                            decompressNet(str(file1), out)
                          else:
                            zlibAsm = getObfuscation(out)
                            print(str(file1) +": "+ str(zlibAsm))
                            if zlibAsm:
                                zlibAsm.insert(0, str(file1)) #+".exe"
                                write_staticoutput(zlibAsm)  
                            else:
                                write_objoutput(out)

                if b"UPX" in out: 
                    decompressUPX(output_file, malware_path)
                          
                if b"Mono/.Net" in out:
                    print("Mono")
                    decompressNet(output_file, malware_path)
                    
                else: 
                    disasm = getObfuscation(malware_path) 
                    if len(disasm) > 2:
                          disasm.insert(0, malware_path.split("/")[-1])
                          write_staticoutput(disasm) 
                    else:
                          write_objoutput(malware_path)
          except:
                pass
if __name__ == '__main__':
    main()
