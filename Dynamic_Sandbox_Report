from google.colab import drive
drive.mount('/content/gdrive') 
import json
import requests
import pandas as pd
import time
import requests
from lxml import html
import re
from bs4 import BeautifulSoup
import csv
import ast
import json
import os
import hashlib

key = "r91uj29u9b9c427ak02y1yx7cf78a9ccj85q6mnzaf1449cawkdx2v4md466a552"
submission_count = 0
def uploadBinaryFile(binary_path):
    size_in_bytes = os.path.getsize(binary_path)
    if submission_count < 100:
        if size_in_bytes/(1024*1024) < 100:
            response = requests.post("https://www.hybrid-analysis.com/api/v2/submit/file", data={'environment_id': 120}, files={'file': ('file', open(binary_path, "rb"))}, headers={'api-key': key, 'User-Agent': "Falcon Sandbox"})
            #print(response) #201 success response 
            submission_count += 1
    else:
      pass

def getSHA256(malware_path):
    h = hashlib.sha256()
    with open(malware_path, 'rb') as file:
        while True:
            chunk = file.read(h.block_size)
            if not chunk:
                break
            h.update(chunk)
    return h.hexdigest()

def getHybridInfo():
    key = "7dwrxbw61cd2e0718kpbu56id55e40e3svpfzm0d33585860ujc7hn055aa251dc"
    environment_id = [120, 110, 100]
    normal_port = False
    #pattern = re.compile(r'(?:^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$:80|443|8443|8080|8888)')
 
    for root, dirs, files in os.walk("/content/gdrive/My Drive/21_Jan"):
        for file in sorted(files, key=lambda x: str(x.split(".")[0])):
          hash = getSHA256(os.path.join(root, file))
          hybrid_data = {}
          with open("test1.html", "wb") as t:
              for env_id in environment_id:
                  url = ("https://www.hybrid-analysis.com/sample/" + str(hash) +"?environmentId=" + str(env_id))
                  report = requests.get(url, headers={'api-key': key, 'User-Agent': "Falcon Sandbox"})
                  if report.status_code == 200:
                    html_content = report.content
                    t.write(report.content)
                  else:
                    uploadBinaryFile(os.path.join(root, file))
                  
          if os.stat('test1.html').st_size > 0:
            with open("test1.html", "rb") as hy:
                line = hy.read().decode('ISO-8859-1')
                soup = BeautifulSoup(line, 'lxml')
                aa = []
                bb = []
                section = soup.find_all('section', attrs={'id':'incident-response'})
                for elem in section:
                    dd = elem.find_all('dd', attrs={'class': 'wraparound'})
                    for val in dd:
                      bb.append(val.get_text(separator=',', strip=True))
                    detail = elem.find_all('dt') 
                    for row in detail:
                      aa.append(row.text)
                hybrid_data = dict(zip(aa, bb))
                hybrid_data.update({"Filename": file, "SHA256":hash})
                sig_mal = soup.find_all('div', attrs={'id':'signatures-malicious'})
                for mi in sig_mal:
                    detail = mi.find_all('li', attrs={'class':'list-group-item list-group-item-group'})
                    for ww in detail:
                      ul = ww.find('span', attrs={'class': 'list-group-item-heading'}) 
                      #ah = ww.find_all('li', attrs={'class': 'list-group-item'})
                      ah = ww.find_all('a', attrs={'data-toggle':"collapse"})
                      ee = []
                      for pp in ah:
                          ee.append(pp.get_text(separator=',', strip=True))
                      if len(ee) == 1:
                          hybrid_data.update({ul.text: str(ee[0])})
                      else:
                          hybrid_data.update({ul.text: ee})
                sig_sus = soup.find_all('div', attrs={'id':'signatures-suspicious'})
                for mi1 in sig_sus:
                    detail1 = mi1.find_all('li', attrs={'class':'list-group-item list-group-item-group'})
                    for ww1 in detail1:
                      ul1 = ww1.find('span', attrs={'class': 'list-group-item-heading'}) 
                      ah1 = ww1.find_all('a', attrs={'data-toggle':"collapse"})
                      ff = []
                      for pp1 in ah1:
                          ff.append(pp1.get_text(separator=',', strip=True))
                      if len(ff) == 1:
                          hybrid_data.update({"sus_"+ul1.text: str(ff[0])})
                      else:
                          hybrid_data.update({"sus_"+ul1.text: ff})
                sig_info = soup.find_all('div', attrs={'id':'signatures-informative'})
                for info in sig_info:
                    detail2 = info.find_all('li', attrs={'class':'list-group-item list-group-item-group'})
                    for ww2 in detail2:
                      ul2 = ww2.find('span', attrs={'class': 'list-group-item-heading'}) 
                      ah2 = ww2.find_all('a', attrs={'data-toggle':"collapse"})
                      gg = []
                      ip2 = []
                      for pp2 in ah2:
                          gg.append(pp2.get_text(separator=',', strip=True))
                          if pp2.get_text(separator=',', strip=True) == "Contacts server":
                              dd1 = ww2.find_all('dd', attrs={'class': "wraparound sigdesc"})
                              for ip in dd1:
                                if re.findall(r'(?:\d{1,3}\.)+(?:\d{1,3}:[1-65535])', ip.get_text(separator=',', strip=True)):
                                  ip2 += [ip.get_text(separator=',', strip=True)]
                              hybrid_data.update({"IP address": ip2})
                      if len(gg) == 1:
                          hybrid_data.update({"info_"+ul2.text: str(gg[0])})
                      else:
                          hybrid_data.update({"info_"+ul2.text: gg})
                section_f = soup.find_all('section', attrs={'id':'sample-dropped-files'})
                for ele in section_f:
                    extract_files = []
                    drs = ele.find_all('li', attrs={'class':"list-group-item list-dropped-file-element"})
                    for dr in drs:
                      fileD = dr.find('h5', attrs={'class':"wraparound"})
                      extract_files.append(fileD.get_text(separator=',', strip=True))
                    hybrid_data.update({"Extracted Files": extract_files})
                label = soup.find('div', attrs={'id':'verdict-container'})
                if label != None:
                    hybrid_data.update({"Hybrid Label": str(label.text).strip()})
                else:
                    pass
                """
                http_traffic = soup.find_all('div', attrs={'id':'http-traffic'})
                ip1 = []
                for http in http_traffic:
                    trs = http.find_all('tr')
                    for tr in trs:
                      tds = tr.find_all('td')
                      for td in tds:
                          if re.findall(r'(?:\d{1,3}\.)+(?:\d{1,3}$:80|443|8443|8080|8888)', td.text.strip()):
                              ip1.append(td.text.strip())
                print(ip1)
                hybrid_data.update({"IP address": list(set(ip1))})
                """
            print(hybrid_data)
            sysSec = []
            sysDes = []
            spyware = []
            ransom = []
            env = []
            stealer = []
            network = []
            patternM = []
            crypt= []
            uncate = []
            external = []
            general = []
            remote = []
            unusual = []
            exploit = []
            persistence = []
            adware = ""
            sha256 = ""
            fileN = ""
            port = ""
            evasive = ""
            spreading = ""
            reverse = []
            fingerprint = ""
            antiDetection = []
            hybrid_dynamic = {}
            ips = []
            ext_files = []
            label_h = ""
            for key in hybrid_data.keys():
                if re.findall(r"System Security", key):
                    sysSec.append(hybrid_data[key])
                if re.findall(r"Spyware|Information Retrieval",key):
                    spyware.append(hybrid_data[key])
                if re.findall(r"System Destruction",key):
                    sysDes.append(hybrid_data[key])
                if re.findall(r"Cryptographic Related",key):
                    crypt.append(hybrid_data[key])
                if re.findall(r"Uncategorized Behavior",key):
                    uncate.append(hybrid_data[key])
                if re.findall(r"Ransomware|Banking", key):
                    ransom.append(hybrid_data[key])
                if re.findall(r"Environment Awareness",key):
                    env.append(hybrid_data[key])
                if re.findall(r"Phishing",key):
                    stealer.append(hybrid_data[key])
                if re.findall(r"Pattern Matching",key):
                    patternM.append(hybrid_data[key])
                if "Adware" == key:
                    adware = hybrid_data[key]
                if "SHA256" == key:
                    sha256 = hybrid_data[key]
                if "Filename" == key:
                    fileN = hybrid_data[key]
                if re.findall(r"Network Behavior|Network Related",key):
                    network.append(hybrid_data[key])
                if re.findall(r"Exploit|Shellcode",key):
                    exploit.append(hybrid_data[key])
                if re.findall(r"Persistence|Installation", key):
                    persistence.append(hybrid_data[key])
                if "known port" == key:
                    port = hybrid_data[key]
                if "Evasive" == key:
                    evasive = hybrid_data[key]
                if re.findall(r"Remote Access", key):
                    remote.append(hybrid_data[key])
                if "Spreading"== key:
                    spreading = hybrid_data[key]
                if re.findall(r"Anti-Reverse Engineering", key):
                    reverse.append(hybrid_data[key])
                if re.findall(r"External Systems", key):
                    external.append(hybrid_data[key])
                if re.findall(r"Unusual Characteristics",key):
                    unusual.append(hybrid_data[key])
                if "Fingerprint"== key:
                    fingerprint = hybrid_data[key]
                if re.findall(r"Anti-Detection/Stealthyness", key):
                    antiDetection.append(hybrid_data[key])
                if re.findall(r"General",key):
                    general.append(hybrid_data[key])
                if "IP address" == key:
                    ips = hybrid_data[key]
                if "Extracted Files" == key:
                    ext_files = hybrid_data[key]
                if "Hybrid Label" == key:
                    label_h = hybrid_data[key]

            hybrid_dynamic.update({"System Security": sysSec,"Spyware": spyware,"System Destruction":sysDes, "Cryptographic Related":crypt,
                                  "Uncategorized Behavior":uncate, "Ransomware":ransom, "Environment Awareness":env, 'Stealer/Phishing': stealer, 'Pattern Matching': patternM,
                                  'Network Behavior': network, "Adware":adware, "Filename": fileN, "SHA256": sha256, "Exploit": exploit, "Persistence": persistence, 
                                  "Evasive":evasive,"Remote Access":remote, "Spreading":spreading,"Anti-Reverse Engineering":reverse, "External Systems": external, "Unusual Characteristics":unusual,
                                  "Fingerprint": fingerprint,"Anti-Detection/Stealthyness":antiDetection, "General":general, "IP address": ips, "Extracted Files": ext_files, "Hybrid Label": label_h})
            df_wh = pd.DataFrame([hybrid_dynamic], dtype='unicode')
            df_wh.to_csv("hybrid.csv", header=False, index=False, mode='a')
          else:
            uploadBinaryFile(os.path.join(root,file))
def main():
    cols = ['System Security', 'Spyware', 'System Destruction', 'Cryptographic Related', 'Uncategorized Behavior', 'Ransomware', 'Environment Awareness', 'Stealer/Phishing', 'Pattern Matching', 'Network Behavior', 'Adware', 'Filename','SHA256', 'Exploit', 'Persistence','Evasive','Remote Access', 'Spreading', 'Anti-Reverse Engineering', 'External Systems', 'Unusual Characteristics', 'Fingerprint', 'Anti-Detection/Stealthyness', 'General', 'IP address', 'Extracted Files', 'Hybrid Label']
    with open("hybrid.csv", "w") as f:
      csvWriter2 = csv.DictWriter(f, fieldnames=cols)
      csvWriter2.writeheader()
    getHybridInfo()
if __name__ == '__main__':
    main()
