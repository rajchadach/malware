import pandas as pd
import os
from itertools import islice
import re
import time
import subprocess
import pathlib

class Memory(object):

    def __init__(self, pid, mal_path):
        self.vmemFile = ""
        self.pid_list = pid
        self.pid = ""
        self.child_pslist = []
        self.mal_path = mal_path

    def getDllDump(self, procID):
        self.pid = procID
        # in case of pid is parent process of other processes and dump all
        dlldump_output = open('/Users/koyko/Documents/memArtefact/dlldump.txt', 'a') # Win10x64_17134
        dlldump = subprocess.Popen(
                    ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'dlldump', '--dump-dir=memArtefact', '-p', self.pid],
                    stdout=dlldump_output)
        dlldump.communicate()
        df16 = pd.read_fwf('/Users/koyko/Documents/memArtefact/dlldump.txt')
        df16.to_csv('/Users/koyko/Documents/memArtefact/dlldump.csv', index=False)
        dlldump_output.close()

    def getProcDump(self, procID):
        # in case of pid is parent process of other processes and dump all
        procdump_output = open('/Users/koyko/Documents/memArtefact/procdump.txt', 'a')
        procdump = subprocess.Popen(
                    ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'procdump', '--dump-dir=memArtefact', '-p', procID],
                    stdout=procdump_output)
        procdump.communicate()
        df17 = pd.read_fwf('/Users/koyko/Documents/memArtefact/procdump.txt')
        df17.to_csv('/Users/koyko/Documents/memArtefact/procdump.csv', index=False)
        procdump_output.close()

    def getldrModules(self, procID):
        ldrmodule_output = open('/Users/koyko/Documents/memArtefact/ldrmodules.txt', 'a')
        ldrmodules = subprocess.Popen(
                ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'ldrmodules', '-p', procID, '-v'],
                stdout=ldrmodule_output)
        ldrmodules.communicate()
        count = 0
        if os.stat('/Users/koyko/Documents/memArtefact/ldrmodules.txt').st_size > 0:
            with open('/Users/koyko/Documents/memArtefact/ldrmodules.txt') as dll:
                for line in dll:
                    count = count + 1
            if count == 2:
                os.remove('/Users/koyko/Documents/memArtefact/ldrmodules.txt')
            else:
                df6 = pd.read_fwf('/Users/koyko/Documents/memArtefact/ldrmodules.txt')
                df6.to_csv('/Users/koyko/Documents/memArtefact/ldrmodules.csv', index=False)
        else:
            print("Empty ldrmodule file")
        ldrmodule_output.close()
        dllist_output = open('/Users/koyko/Documents/memArtefact/dlllist.txt', 'a')
        dlllist = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'dlllist', '-p', procID],
                stdout=dllist_output)
        dlllist.communicate()
        count = 0
        if os.stat('/Users/koyko/Documents/memArtefact/dlllist.txt').st_size > 0:
            with open('/Users/koyko/Documents/memArtefact/dlllist.txt') as dll:
                for line in dll:
                    count += 1
            if 2 <= count <= 3:
                os.remove('/Users/koyko/Documents/memArtefact/dlllist.txt')
        else:
            print("Empty dlllist file")
        dllist_output.close()
        handles_output = open('/Users/koyko/Documents/memArtefact/handles.txt', 'a')
        handles = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'handles',
                 '-p', procID],
                stdout=handles_output)
        handles.communicate()
        count = 0
        if os.stat('/Users/koyko/Documents/memArtefact/handles.txt').st_size > 0:
            with open('/Users/koyko/Documents/memArtefact/handles.txt') as hd:
                for line in hd:
                    count = count + 1
            if count == 2:
                os.remove('/Users/koyko/Documents/memArtefact/handles.txt')
            else:
                df8 = pd.read_fwf('/Users/koyko/Documents/memArtefact/handles.txt')
                df8.to_csv('/Users/koyko/Documents/memArtefact/handles.csv', index=False)
        else:
            print("Empty handle file")
        handles_output.close()
        malfind_output = open('/Users/koyko/Documents/memArtefact/malfind.txt', 'a')
        try:
            malfind = subprocess.Popen(
                ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'malfind', '-p', procID], stdout=malfind_output)
            malfind.communicate()
            if os.stat('/Users/koyko/Documents/memArtefact/malfind.txt').st_size > 0:
                df9 = pd.read_fwf('/Users/koyko/Documents/memArtefact/malfind.txt')
                df9.to_csv('/Users/koyko/Documents/memArtefact/malfind.csv', index=False)

            malfind_output.close()
        except:
            pass
        apihook_output = open('/Users/koyko/Documents/memArtefact/apihook.txt', 'a')
        apihooks = subprocess.Popen(
                ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'apihooks', '-p', procID],
                stdout=apihook_output)
        apihooks.communicate()
        apihook_output.close()

    def memoryAnalysis(self):
        pathlib.Path("/Users/koyko/Documents/memArtefact").mkdir(exist_ok=True)  # create malware sample directory
        pslist_output = open('/Users/koyko/Documents/memArtefact/pslist.txt', 'a')
        # Use pid from runMalware to filter volatility
        # p1 = subprocess.Popen(['cd', '/Users/koyko/Documents','source legacy/bin/activate'], stdout=subprocess.PIPE)
        pslist = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'pslist'],
            stdout=pslist_output)  # 18362 for v1903
        pslist.communicate()
        df = pd.read_fwf('/Users/koyko/Documents/memArtefact/pslist.txt')
        if df.empty == False:
            df.to_csv('/Users/koyko/Documents/memArtefact/pslist.csv', index=False)
        pslist_output.close()
        psscan_output = open('/Users/koyko/Documents/memArtefact/psscan.txt', 'a')
        psscan = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'psscan'],
            stdout=psscan_output)
        psscan.communicate()
        df1 = pd.read_fwf('/Users/koyko/Documents/memArtefact/psscan.txt')
        if df1.empty == False:
            df1.to_csv('/Users/koyko/Documents/memArtefact/psscan.csv', index=False)
        psscan_output.close()
        pstree_output = open('/Users/koyko/Documents/memArtefact/pstree.txt', 'a')
        pstree = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'pstree'],
            stdout=pstree_output)
        pstree.communicate()
        df2 = pd.read_fwf('/Users/koyko/Documents/memArtefact/pstree.txt')
        if df2.empty == False:
            df2.to_csv('/Users/koyko/Documents/memArtefact/pstree.csv', index=False)
        pstree_output.close()
        psxview_output = open('/Users/koyko/Documents/memArtefact/psxview.txt', 'a')
        psxview = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'psxview'],
            stdout=psxview_output)
        psxview.communicate()
        df3 = pd.read_fwf('/Users/koyko/Documents/memArtefact/psxview.txt')
        if df3.empty == False:
            df3.to_csv('/Users/koyko/Documents/memArtefact/psxview.csv', index=False)
        psxview_output.close()
        netscan_output = open('/Users/koyko/Documents/memArtefact/netscan.txt', 'a')
        netscan = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'netscan'],
            stdout=netscan_output)
        netscan.communicate()
        df4 = pd.read_fwf('/Users/koyko/Documents/memArtefact/netscan.txt')
        if df4.empty == False:
            df4.to_csv('/Users/koyko/Documents/memArtefact/netscan.csv', index=False)
        netscan_output.close()
        modules_output = open('/Users/koyko/Documents/memArtefact/modules.txt', 'a')
        modules = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'modules'],
            stdout=modules_output)
        modules.communicate()
        df5 = pd.read_fwf('/Users/koyko/Documents/memArtefact/modules.txt')
        if df5.empty == False:
            df5.to_csv('/Users/koyko/Documents/memArtefact/modules.csv', index=False)
        modules_output.close()
        svcscan_output = open('/Users/koyko/Documents/memArtefact/svcscan.txt', 'a')
        svcscan = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'svcscan',
             '--verbose'],
            stdout=svcscan_output)
        svcscan.communicate()
        if os.stat('/Users/koyko/Documents/memArtefact/svcscan.txt').st_size > 0:
            df10 = pd.read_fwf('/Users/koyko/Documents/memArtefact/svcscan.txt')
            df10.to_csv('/Users/koyko/Documents/memArtefact/svcscan.csv', index=False)
        else:
            print("Empty svcscan file")
        svcscan_output.close()
        filescan_output = open('/Users/koyko/Documents/memArtefact/filescan.txt', 'a')
        filescan = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'filescan'],
            stdout=filescan_output)
        filescan.communicate()
        if os.stat('/Users/koyko/Documents/memArtefact/filescan.txt').st_size > 0:
            df12 = pd.read_fwf('/Users/koyko/Documents/memArtefact/filescan.txt')
            df12.to_csv('/Users/koyko/Documents/memArtefact/filescan.csv', index=False)
        else:
            print("Empty filescan file")
        filescan_output.close()
        mutant_output = open('/Users/koyko/Documents/memArtefact/mutant.txt', 'a')
        mutantscan = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'mutantscan',
             '--silent'],
            stdout=mutant_output)
        mutantscan.communicate()
        if os.stat('/Users/koyko/Documents/memArtefact/mutant.txt').st_size > 0:
            df13 = pd.read_fwf('/Users/koyko/Documents/memArtefact/mutant.txt')
            df13.to_csv('/Users/koyko/Documents/memArtefact/mutant.csv', index=False)
        else:
            print("Empty mutant file")
        mutant_output.close()
        ssdt_output = open('/Users/koyko/Documents/memArtefact/ssdt.txt', 'a')
        ssdt = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'ssdt'],
            stdout=ssdt_output)
        ssdt.communicate()
        if os.stat('/Users/koyko/Documents/memArtefact/ssdt.txt').st_size > 0:
            df14 = pd.read_fwf('/Users/koyko/Documents/memArtefact/ssdt.txt')
            df14.to_csv('/Users/koyko/Documents/memArtefact/ssdt.csv', index=False)
        else:
            print("Empty ssdt file")
        ssdt_output.close()
        privs_output = open('/Users/koyko/Documents/memArtefact/privs.txt', 'a')
        privs = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'privs',
             '--silent'],
            stdout=privs_output)
        privs.communicate()
        if os.stat('/Users/koyko/Documents/memArtefact/privs.txt').st_size > 0:
            df15 = pd.read_fwf('/Users/koyko/Documents/memArtefact/privs.txt')
            df15.to_csv('/Users/koyko/Documents/memArtefact/privs.csv', index=False)
        else:
            print("Empty privs file")
        privs_output.close()
        cmdscan_output = open('/Users/koyko/Documents/memArtefact/cmdscan.txt', 'a')
        cmdscan = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'cmdscan'],
            stdout=cmdscan_output, stderr=subprocess.PIPE)
        cmdscan.communicate()
        if os.stat('/Users/koyko/Documents/memArtefact/cmdscan.txt').st_size > 0:
            df11 = pd.read_fwf('/Users/koyko/Documents/memArtefact/cmdscan.txt')
            df11.to_csv('/Users/koyko/Documents/memArtefact/cmdscan.csv', index=False)
        else:
            print("Empty cmdscan file")
        cmdscan_output.close()
        printkeyR_output = open('/Users/koyko/Documents/memArtefact/reg_SharedTaskScheduler.txt', 'a')
        printkey = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'printkey',
             '-K "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\SharedTaskScheduler"'],
            stdout=printkeyR_output, stderr=subprocess.PIPE)
        printkey.communicate()
        if os.stat('/Users/koyko/Documents/memArtefact/reg_SharedTaskScheduler.txt').st_size > 0:
            df17 = pd.read_fwf('/Users/koyko/Documents/memArtefact/reg_SharedTaskScheduler.txt')
            df17.to_csv('/Users/koyko/Documents/memArtefact/reg_SharedTaskScheduler.csv', index=False)
        else:
            print("Empty reg file")
        printkeyR_output.close()
        printkeyR1_output = open('/Users/koyko/Documents/memArtefact/reg_CodeIdentifiers.txt', 'a')
        printkey1 = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'printkey',
             '-K "Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"'],
            stdout=printkeyR1_output, stderr=subprocess.PIPE)
        printkey1.communicate()
        try:
            df18 = pd.read_fwf('/Users/koyko/Documents/memArtefact/reg_CodeIdentifiers.txt')
            df18.to_csv('/Users/koyko/Documents/memArtefact/reg_CodeIdentifiers.csv', index=False)
        except pd.io.common.EmptyDataError:
            print("Empty reg1 file")
        printkeyR1_output.close()
        printkeyR2_output = open('/Users/koyko/Documents/memArtefact/reg_run.txt', 'a')
        printkey2 = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'printkey',
             '-K "Software\\Wow6432node\\Microsoft\\Windows\\CurrentVersion\\run"'],
            stdout=printkeyR2_output, stderr=subprocess.PIPE)
        printkey2.communicate()
        try:
            df19 = pd.read_fwf('/Users/koyko/Documents/memArtefact/reg_run.txt')
            df19.to_csv('/Users/koyko/Documents/memArtefact/reg_run.csv', index=False)
        except pd.io.common.EmptyDataError:
            print("Empty reg2 file")
        printkeyR2_output.close()
        printkeyR3_output = open('/Users/koyko/Documents/memArtefact/reg_services.txt', 'a')
        printkey3 = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'printkey',
             '-K "System\\CurrentControlSet\\Services"'],
            stdout=printkeyR3_output, stderr=subprocess.PIPE)
        printkey3.communicate()
        try:
            df19 = pd.read_fwf('/Users/koyko/Documents/memArtefact/reg_services.txt')
            df19.to_csv('/Users/koyko/Documents/memArtefact/reg_services.csv', index=False)
        except pd.io.common.EmptyDataError:
            print("Empty reg3 file")
        printkeyR3_output.close()
        printkeyR4_output = open('/Users/koyko/Documents/memArtefact/reg_Run.txt', 'a')
        printkey4 = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'printkey',
             '-K "Software\\Microsoft\\Windows\\CurrentVersion\\Run"'],
            stdout=printkeyR4_output, stderr=subprocess.PIPE)
        printkey4.communicate()
        try:
            df20 = pd.read_fwf('/Users/koyko/Documents/memArtefact/reg_Run.txt')
            df20.to_csv('/Users/koyko/Documents/memArtefact/reg_Run.csv', index=False)
        except pd.io.common.EmptyDataError:
            print("Empty reg4 file")
        printkeyR4_output.close()
        printkeyR5_output = open('/Users/koyko/Documents/memArtefact/reg_Uninstall.txt', 'a')
        printkey5 = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'printkey',
             '-K "Software\\Microsoft\\Windows\\Current\\Version\\Uninstall"'],
            stdout=printkeyR5_output, stderr=subprocess.PIPE)
        printkey5.communicate()
        try:
            df21 = pd.read_fwf('/Users/koyko/Documents/memArtefact/reg_Uninstall.txt')
            df21.to_csv('/Users/koyko/Documents/memArtefact/reg_Uninstall.csv', index=False)
        except pd.io.common.EmptyDataError:
            print("Empty reg5 file")
        printkeyR5_output.close()
        printkeyR6_output = open('/Users/koyko/Documents/memArtefact/reg_UserAssist.txt', 'a')
        printkey6 = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'printkey',
             '-K "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist"'],
            stdout=printkeyR6_output, stderr=subprocess.PIPE)
        printkey6.communicate()
        try:
            df22 = pd.read_fwf('/Users/koyko/Documents/memArtefact/reg_UserAssist.txt')
            df22.to_csv('/Users/koyko/Documents/memArtefact/reg_UserAssist.csv', index=False)
        except pd.io.common.EmptyDataError:
            print("Empty reg6 file")
        printkeyR6_output.close()
        printkeyR7_output = open('/Users/koyko/Documents/memArtefact/reg_RunMRU.txt', 'a')
        printkey7 = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'printkey',
             '-K "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU"'],
            stdout=printkeyR7_output, stderr=subprocess.PIPE)
        printkey7.communicate()
        try:
            df23 = pd.read_fwf('/Users/koyko/Documents/memArtefact/reg_RunMRU.txt')
            df23.to_csv('/Users/koyko/Documents/memArtefact/reg_RunMRU.csv', index=False)
        except pd.io.common.EmptyDataError:
            print("Empty reg7 file")
        printkeyR7_output.close()
        printkeyR8_output = open('/Users/koyko/Documents/memArtefact/reg_RecentDocs.txt', 'a')
        printkey8 = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'printkey',
             '-K "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs"'],
            stdout=printkeyR8_output, stderr=subprocess.PIPE)
        printkey8.communicate()
        try:
            df24 = pd.read_fwf('/Users/koyko/Documents/memArtefact/reg_RecentDocs.txt')
            df24.to_csv('/Users/koyko/Documents/memArtefact/reg_RecentDocs.csv', index=False)
        except pd.io.common.EmptyDataError:
            print("Empty reg8 file")
        printkeyR8_output.close()
        printkeyR9_output = open('/Users/koyko/Documents/memArtefact/reg_OpenSaveMRU.txt', 'a')
        printkey9 = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'printkey',
             '-K "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ComDlg32\\OpenSaveMRU"'],
            stdout=printkeyR9_output, stderr=subprocess.PIPE)
        printkey9.communicate()
        try:
            df25 = pd.read_fwf('/Users/koyko/Documents/memArtefact/reg_OpenSaveMRU.txt')
            df25.to_csv('/Users/koyko/Documents/memArtefact/reg_OpenSaveMRU.csv', index=False)
        except pd.io.common.EmptyDataError:
            print("Empty reg9 file")
        printkeyR9_output.close()
        printkeyR10_output = open('/Users/koyko/Documents/memArtefact/reg_run1.txt', 'a')
        printkey10 = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'printkey',
             '-K "Software\\Microsoft\\Windows NT\\CurrentVersion"'],
            stdout=printkeyR10_output, stderr=subprocess.PIPE)
        printkey10.communicate()
        try:
            df26 = pd.read_fwf('/Users/koyko/Documents/memArtefact/reg_run1.txt')
            df26.to_csv('/Users/koyko/Documents/memArtefact/reg_run1.csv', index=False)
        except pd.io.common.EmptyDataError:
            print("Empty reg10 file")
        printkeyR10_output.close()
        printkeyR11_output = open('/Users/koyko/Documents/memArtefact/reg_safeboot.txt', 'a')
        printkey11 = subprocess.Popen(
            ['vol.py', '-f', self.vmemFile, '--profile=Win10x64_17134', 'printkey',
             '-K "System\\CurrentControlSet\\Control\\SafeBoot\\Option"'],
            stdout=printkeyR11_output, stderr=subprocess.PIPE)
        printkey11.communicate()
        try:
            df27 = pd.read_fwf('/Users/koyko/Documents/memArtefact/reg_safeboot.txt')
            df27.to_csv('/Users/koyko/Documents/memArtefact/reg_safeboot.csv', index=False)
        except pd.io.common.EmptyDataError:
            print("Empty reg11 file")
        printkeyR11_output.close()
        #extractMemory(pid)

    def getSnapshotVM(self):
        time.sleep(5)
        list_of_files = []
        latest_vmsn_file = ""
        #for root, dir, files in os.walk("/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm"):
        for root, dir, files in os.walk("/Users/koyko/Documents/Rerun_Sep/[RyUK]35ff457Rk"):
            for entry in files:
                if entry.endswith(".vmsn") or entry.endswith(".vmem"):
                    list_of_files.append(os.path.join(root, entry))
                    print(time.strftime('%Y/%m/%d %H:%M:%S',
                                        time.gmtime(os.path.getctime(os.path.join(root, entry)))))
        self.vmemFile = f"{max(list_of_files, key=os.path.getctime)}"
        print(self.vmemFile)
        for sn in list_of_files:
            if sn.endswith(".vmsn") and (
                    sn.split("/")[-1].split(".")[0] == self.vmemFile.split("/")[-1].split(".")[0]):
                latest_vmsn_file = sn
            else:
                pass
        print(latest_vmsn_file)
        self.memoryAnalysis()

    def extractMemory(self):
        df_pslist = pd.read_csv('/Users/koyko/Documents/memArtefact/pslist.csv')
        df_prefetch = pd.read_csv('/Users/koyko/Documents/hybrid.csv')
        pslist_list = []
        parent_pid = ""
        childPPID_pslist = []
        if not self.pid_list:
            for index, row in df_pslist.iterrows():
                if self.pid == "" and "test.exe" in row['Name']:
                    self.pid = str(row['PID'])
                    print("No PID in list but got test process: " + self.pid)
                    self.getldrModules(self.pid)
                    pslist_list.append(row)
                    for index, row in df_pslist.iterrows():
                        if self.pid == str(row['PPID']) or "xmrig.exe" in row['Name']:
                            self.child_pslist.append(str(row['PID']))
                            childPPID_pslist.append(row)
        else:
            for proc in self.pid_list:
                for index, row in df_pslist.iterrows():
                    if proc == str(row['PID']):
                        self.pid = str(row['PID'])
                        pslist_list.append(row)
                        self.getldrModules(self.pid)

                    if proc == str(row['PPID']) or self.pid == str(row['PPID']) or proc == str(row['Name']):
                        self.child_pslist.append(str(row['PID']))
                        childPPID_pslist.append(row)

                    else:
                        if proc != str(row['PID']) and "test.exe" in row['Name'] and self.pid == "":
                            self.pid = str(row['PID'])
                            print("Found test process: " + self.pid)
                            self.getldrModules(self.pid)
                            pslist_list.append(row)
                            for index, row in df_pslist.iterrows():
                                if self.pid == str(row['PPID']):
                                    self.child_pslist.append(str(row['PID']))
                                    childPPID_pslist.append(row)


        if self.child_pslist:
            if len(self.child_pslist) == 1 and len(pslist_list) == 0:
                self.pid = self.child_pslist[0]
                print("PID: " + self.pid)
            for child in self.child_pslist:
                for index_p, row_p in df_pslist.iterrows():
                    if child == str(row_p["PPID"]):
                        self.child_pslist.append(str(row_p['PID']))
                        childPPID_pslist.append(row_p)
                    else:
                        pass
            self.child_pslist = list(set(self.child_pslist) - set(self.pid_list))
            print(self.child_pslist)
        #self.child_pslist = list(set([c for c in self.child_pslist if self.child_pslist.count(c) > 1]))
        if pslist_list:
            df_process = pd.DataFrame(pslist_list)
            df_prefetch["Offset(V)"] = df_prefetch.apply(lambda df_prefetch: df_process["Offset(V)"].drop_duplicates().values.tolist(), axis=1)
            df_prefetch["Name"] = df_prefetch.apply(lambda df_prefetch: df_process["Name"].drop_duplicates().values.tolist(), axis=1)
            df_prefetch["PID"] = df_prefetch.apply(lambda df_prefetch: df_process["PID"].drop_duplicates().values.tolist(), axis=1)
            df_prefetch["PPID"] = df_prefetch.apply(lambda df_prefetch: df_process["PPID"].drop_duplicates().values.tolist(), axis=1) #recheck processName and add column
            df_prefetch["Wow64"] = df_prefetch.apply(lambda df_prefetch: df_process["Wow64"].drop_duplicates().values.tolist(), axis=1)
            df_prefetch["Start"] = df_prefetch.apply(lambda df_prefetch: df_process["Start"].drop_duplicates().values.tolist(), axis=1)
            df_prefetch["Exit"] = df_prefetch.apply(lambda df_prefetch: df_process["Exit"].drop_duplicates().values.tolist(), axis=1)
        if self.child_pslist:
            df_prefetch["childPPID_pslist"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame(childPPID_pslist).drop_duplicates().values.tolist(), axis=1)
        df_psscan = pd.read_csv('/Users/koyko/Documents/memArtefact/psscan.csv')
        psscan_list = []
        samePPID_psscan = []
        for index, row in df_psscan.iterrows():
            try:
                if self.pid == str(row['PID']):  # test.exe
                    psscan_list.append(row)
                if self.child_pslist:
                    for ch in self.child_pslist:
                        if ch == str(row['PID']):
                            samePPID_psscan.append(row)
            except:
                pass
        if psscan_list:
            df_processS = pd.DataFrame(psscan_list)
            df_prefetch["Offset(P)"] = df_prefetch.apply(lambda df_prefetch: df_processS["Offset(P)"].drop_duplicates().values.tolist(), axis=1)
            df_prefetch["PDB"] = df_prefetch.apply(lambda df_prefetch: df_processS["PDB"].drop_duplicates().values.tolist(), axis=1)
            df_prefetch["Time created"] = df_prefetch.apply(lambda df_prefetch: df_processS["Time created"].drop_duplicates().values.tolist(), axis=1)
            df_prefetch["Time exited"] = df_prefetch.apply(lambda df_prefetch: df_processS["Time exited"].drop_duplicates().values.tolist(), axis=1)
        if samePPID_psscan:
            df_prefetch["samePPID_psscan"] = df_prefetch.apply(
                lambda df_prefetch: pd.DataFrame(samePPID_psscan).drop_duplicates().values.tolist(), axis=1)
        if self.child_pslist:
            for child in self.child_pslist:
                self.getldrModules(child)
        df_pstree = pd.read_csv('/Users/koyko/Documents/memArtefact/pstree.csv')
        pstree_list = []
        process_S = []
        for index, row in df_pstree.iterrows():
            try:
                if str(row['Pid']) == self.pid:  # test.exe
                    process_S.append(str(row["Name"]))
                    parent_pid = str(row["PPid"])
                if self.child_pslist:
                    for ch in self.child_pslist:
                        if ch == str(row['PID']) or ch == str(row['PPid']):
                            process_S.append(str(row["Name"]))
            except:
                pass
        process_S = list(dict.fromkeys(process_S))
        int_dot = []
        range_dot = 0
        if len(process_S) == 1:
            range_dot = str(process_S[0]).replace(" ","").find("0x")
        else:
            for i in range(len(process_S)):
                int_dot.append(process_S[i].find("0x"))
            if len(int_dot) != 0:
                range_dot = max(int_dot)
        #pattern = re.compile(r"^.*0x")
        if range_dot == 0:
            for index, row in df_pstree.iterrows():
                try:
                    if self.pid == str(row["Pid"]) or self.pid == str(row["PPid"]):
                        pstree_list.append(row["Name"] + " " + str(row["Pid"]))  # pid of child process
                except:
                    pass
        else:
            for i in range(range_dot):
                for index, row in df_pstree.iterrows():  # limit number of rows from start to winword.exe found
                    if parent_pid == str(row["Pid"]) or self.pid == str(row["Pid"]):
                        pstree_list.append(row["Name"] + " " + str(row["Pid"]))
                        parent_pid = str(row["PPid"])
        if self.child_pslist:
            for ch in self.child_pslist:
                for index, row in df_pstree.iterrows():
                    if ch == str(row["Pid"]) or ch == str(row["PPid"]) or parent_pid == str(
                                    row["PPid"]):
                        pstree_list.append(row["Name"] + " " + str(row["Pid"]))  # pid of child process
                        parent_pid = str(row["Pid"])
        df_prefetch["Pstree_Result"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame(pstree_list).drop_duplicates().values.tolist(), axis=1)
        df_psxview = pd.read_csv('/Users/koyko/Documents/memArtefact/psxview.csv')
        psxview_list = []
        samePPID_psxview = []
        for index, row in df_psxview.iterrows():
            try:
                if self.pid == str(row['PID']):  # test.exe
                    psxview_list.append(row)
                if self.child_pslist:
                    for child in self.child_pslist:
                        if child == str(row["PID"]):
                            samePPID_psxview.append(row)
            except:
                pass
        if psxview_list:
            df_psxviewS = pd.DataFrame(psxview_list)
            df_prefetch["pslist"] = df_prefetch.apply(lambda df_prefetch: df_psxviewS["pslist"].drop_duplicates().values.tolist(), axis=1)
            df_prefetch["psscan"] = df_prefetch.apply(lambda df_prefetch: df_psxviewS["psscan"].drop_duplicates().values.tolist(), axis=1)
            df_prefetch["thrdproc"] = df_prefetch.apply(lambda df_prefetch: df_psxviewS["thrdproc"].drop_duplicates().values.tolist(), axis=1)
            df_prefetch["pspcid"] = df_prefetch.apply(lambda df_prefetch: df_psxviewS["pspcid"].drop_duplicates().values.tolist(), axis=1) #recheck processName and add column
            df_prefetch["csrss"] = df_prefetch.apply(lambda df_prefetch: df_psxviewS["csrss"].drop_duplicates().values.tolist(), axis=1)
            df_prefetch["deskthrd"] = df_prefetch.apply(lambda df_prefetch: df_psxviewS["deskthrd"].drop_duplicates().values.tolist(), axis=1)
            df_prefetch["ExitTime"] = df_prefetch.apply(lambda df_prefetch: df_psxviewS["ExitTime"].drop_duplicates().values.tolist(), axis=1)
        if samePPID_psxview:
            df_prefetch["samePPID_psxview"] = df_prefetch.apply(
                lambda df_prefetch: pd.DataFrame(samePPID_psxview).values.tolist(), axis=1)
        df_netscan = pd.read_csv('/Users/koyko/Documents/memArtefact/netscan.csv')
        netscan_list = []
        samePPID_netscan = []
        for index, row in df_netscan.iterrows():
                try:
                    if self.pid == str(row['Pid']):  # test.exe
                        netscan_list.append(row)
                    if self.child_pslist:
                        for ch in self.child_pslist:
                            if ch == str(row["Pid"]):
                                samePPID_netscan.append(row)
                except:
                    pass
        """
        if netscan_list:
            df_netscanS = pd.DataFrame(netscan_list)
            df_prefetch["Proto"] = df_prefetch.apply(lambda df_prefetch: df_netscanS["Proto"].drop_duplicates().to_string(index=False), axis=1)
            #df_prefetch["Local Address"] = df_prefetch.apply(lambda df_prefetch: df_netscanS["Local Address"].drop_duplicates().tolist(), axis=1)
            #df_prefetch["Foreign Address"] = df_prefetch.apply(
                #lambda df_prefetch: df_netscanS["Foreign Address"].drop_duplicates().tolist(), axis=1)
            df_prefetch["State"] = df_prefetch.apply(lambda df_prefetch: df_netscanS["State"].drop_duplicates().to_string(index=False), axis=1)
            df_prefetch["Created"] = df_prefetch.apply(lambda df_prefetch: df_netscanS["Created"].drop_duplicates().to_string(index=False), axis=1)
        else:
            pass
        """
        if samePPID_netscan:
            df_prefetch["samePPID_netscan"] = df_prefetch.apply(
                lambda df_prefetch: pd.DataFrame(samePPID_netscan).values.tolist(), axis=1)
        if os.path.exists("/Users/koyko/Documents/memArtefact/modules.csv"):
            df_modules = pd.read_csv('/Users/koyko/Documents/memArtefact/modules.csv')
            modules_list = []
            for index, row in df_modules.iterrows():
                try:
                    modules_list.append(str(row["Name"]) + "->>" + str(row["File"]))
                except:
                    pass
        #df_prefetch["Modules_Result"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame(modules_list).values.tolist(), axis=1)
        ldrmodule_LIM_list = []
        if os.path.exists("/Users/koyko/Documents/memArtefact/ldrmodules.csv"):
            for ldr in open("/Users/koyko/Documents/memArtefact/ldrmodules.csv"):
                csv_row = ldr.split()
                if self.pid in csv_row:
                    ldrmodule_LIM_list.append(" ".join(csv_row[3:]))
                if self.child_pslist:
                    for cp in self.child_pslist:
                        if cp in csv_row:
                            ldrmodule_LIM_list.append(" ".join(csv_row[3:]))
            df_prefetch["InLoad_InInit_InMem"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame(ldrmodule_LIM_list).drop_duplicates().values.tolist(), axis=1)
        else:
            pass

        dll_list = []
        command_value = []
        load_count = []
        dll_path = []
        if os.path.exists("/Users/koyko/Documents/memArtefact/dlllist.txt"):
            with open('/Users/koyko/Documents/memArtefact/dlllist.txt', 'r') as r:
                lineDLL = r.read().splitlines()
                for line in lineDLL:
                    if line.startswith("0x"):
                        dll_list.append(" ".join(str(line).split()))
                    if line.startswith("Command line :"):
                        command_value.append(line)
            if command_value:
                command_value = list(set(command_value))
                df_prefetch["Dll_CommandLine"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame([command_value]).drop_duplicates().values.tolist(), axis=1)
            if dll_list:  # columns=["Base", "Size", "LoadCount", "LoadDate", "LoadTime", "LoadTimeZone", "Path"]
                for index, d in enumerate(dll_list):
                    load_count.append(dll_list[index].split()[2])
                    dll_path.append(dll_list[index].split()[-1])
                #df_dlllist = pd.DataFrame([sub.strip().rsplit(" ", 1) for sub in dll_list], columns=["Base", "Path"])
                df_prefetch["Dll_Path"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame([dll_path]).drop_duplicates().drop_duplicates().values.tolist(), axis=1)
                df_prefetch["Dll LoadCount"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame(load_count).drop_duplicates().drop_duplicates().values.tolist(), axis=1)
        else:
            pass

        if os.path.exists("/Users/koyko/Documents/memArtefact/handles.csv"):
            df_handle = pd.read_csv('/Users/koyko/Documents/memArtefact/handles.csv')
            handle_list = []
            handle_mutant = []
            for index, row in df_handle.iterrows():
                try:
                    if str(row['Offset(V)']).startswith("0x") and not pd.isna(row['Details']):
                        handle_list.append(str(row["Type"]) + "-->" + str(row["Details"]))
                    #if str(row["Type"]) == "Mutant":
                        #handle_mutant.append(row)
                    if not pd.isna(row['Type']):
                        df_prefetch["Handle_Type"] = df_prefetch.apply(lambda df_prefetch: df_handle["Type"].drop_duplicates().tolist(), axis=1)
                except:
                    pass
            df_prefetch["Handle_Details"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame(handle_list).drop_duplicates().values.tolist(), axis=1)
            #if handle_mutant:
                #df_prefetch["Handle_Mutant"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame(handle_mutant)["Details"].values.tolist(), axis=1)
        if os.path.exists('/Users/koyko/Documents/memArtefact/malfind.csv'):
            df_malfind = pd.read_csv('/Users/koyko/Documents/memArtefact/malfind.csv')
            malfind_list = []
            mal_flags = []
            for index, row in df_malfind.iterrows():
                try:
                    if self.pid in str(row):
                        if "Vad Tag" in str(row):
                            malfind_list.append(str(row).split("Vad Tag:")[1].split("\n")[0].strip())
                        elif "Flags" in str(row):
                            mal_flags.append(str(row).split("Flags:")[1].split("\n")[0].strip())
                    if self.child_pslist:
                        for ch in self.child_pslist:
                            if ch in str(row):
                                if "Vad Tag" in str(row):
                                    malfind_list.append(str(row).split("Vad Tag:")[1].split("\n")[0].strip())
                                elif "Flags" in str(row):
                                    mal_flags.append(str(row).split("Flags:")[1].split("\n")[0].strip())
                except:
                    pass
            df_prefetch["Vad Tag"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame(malfind_list).drop_duplicates().values, axis=1)
            df_prefetch["Flags"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame(mal_flags).drop_duplicates().values, axis=1)
        else:
            pass
        if os.path.exists('/Users/koyko/Documents/memArtefact/filescan.csv'):
            df_filescan = pd.read_csv('/Users/koyko/Documents/memArtefact/filescan.csv')
            df_prefetch["Access"] = df_prefetch.apply(lambda df_prefetch: df_filescan["Access"].drop_duplicates().tolist(), axis=1)
        #df_prefetch["Filescan_Name"] = df_prefetch.apply(lambda df_prefetch: df_filescan["Name"].drop_duplicates().tolist(), axis=1) #many irrelevant data
        if os.path.exists('/Users/koyko/Documents/memArtefact/mutant.csv'):
            df_mutant = pd.read_csv('/Users/koyko/Documents/memArtefact/mutant.csv')
            mutant_list = []
            for index, row in df_mutant.iterrows():
                try:
                    if self.pid in str(row["CID"]):  # "test.exe" in str(row["Process"))
                        mutant_list.append(str(row["Name"]))
                    if self.child_pslist:
                        for ch in self.child_pslist:
                            if ch in str(row["CID"]):
                                mutant_list.append(str(row["Name"]))
                except:
                    pass
            if mutant_list:
                df_prefetch["Mutant_Name"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame(mutant_list).drop_duplicates().values.tolist(), axis=1)
        if os.path.exists('/Users/koyko/Documents/memArtefact/privs.csv'):
            df_privs = pd.read_csv('/Users/koyko/Documents/memArtefact/privs.csv')
            privs_list = []
            for index, row in df_privs.iterrows():
                try:
                    if self.pid == str(row["Pid"]):  # "test.exe" in str(row["Process"))
                        privs_list.append(row)
                    if self.child_pslist:
                        for c in self.child_pslist:
                            if c in str(row["Pid"]):
                                privs_list.append(row)
                except:
                    pass
            if privs_list:
                df_privsS = pd.DataFrame(privs_list)
                df_prefetch["Priv_Process"] = df_prefetch.apply(
                    lambda df_prefetch: df_privsS["Pid"].drop_duplicates().tolist(), axis=1)
                df_prefetch["Priv_value"] = df_prefetch.apply(lambda df_prefetch: df_privsS["Value"].drop_duplicates().tolist(), axis=1)
                df_prefetch["Privilege"] = df_prefetch.apply(lambda df_prefetch: df_privsS["Privilege"].drop_duplicates().tolist(), axis=1)
                df_prefetch["Attributes"] = df_prefetch.apply(lambda df_prefetch: df_privsS["Attributes"].drop_duplicates().tolist(), axis=1)
                df_prefetch["Priv_Description"] = df_prefetch.apply(lambda df_prefetch: df_privsS["Description"].drop_duplicates().tolist(), axis=1)
        apihook_all = []
        apihook_list = []
        if os.path.exists('/Users/koyko/Documents/memArtefact/apihook.txt'):
            with open('/Users/koyko/Documents/memArtefact/apihook.txt', 'r') as r:
                lineAPI = r.read()
                index_startAPI = [match.start() for match in re.finditer("Hook mode", lineAPI)]
                index_endAPI = [match.start() for match in re.finditer("Disassembly\(0\)", lineAPI)]
                try:
                    for sof in range(0, len(index_startAPI)):
                        apihook_all.append(lineAPI[index_startAPI[sof]:index_endAPI[sof]].strip())
                except:
                    pass
            for api in apihook_all:
                if self.pid in api or str(self.mal_path).lower() in str(api).lower() and str(api).isprintable():
                    apihook_list.append(str(api).split("\n"))
                if self.child_pslist:
                    for c in self.child_pslist:
                        if c in api:
                            apihook_list.append(str(api).split("\n"))
            if apihook_list:
                df_apihook = pd.DataFrame(apihook_list, columns=['Hook mode', 'Hook type', 'Process_hook', 'Victim module', 'Function',
                                                                  'Hook address', 'Hooking module'])
                df_prefetch["Hook mode"] = df_prefetch.apply(lambda df_prefetch: df_apihook["Hook mode"].drop_duplicates().values.tolist(), axis=1)
                df_prefetch["Hook type"] = df_prefetch.apply(lambda df_prefetch: df_apihook["Hook type"].drop_duplicates().values.tolist(), axis=1)
                proc_hook = df_apihook["Process_hook"].drop_duplicates().values.tolist()
                for i, s in enumerate(proc_hook):
                    if 'Victim module: ntoskrnl.exe' in s:
                        proc_hook.pop(i)
                        df_prefetch["Process_hook"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame(proc_hook).drop_duplicates().values.tolist(),
                                                                        axis=1)
                    else:
                        df_prefetch["Process_hook"] = df_prefetch.apply(lambda df_prefetch: df_apihook["Process_hook"].drop_duplicates().values.tolist(), axis=1)
                df_prefetch["Victim module"] = df_prefetch.apply(lambda df_prefetch: df_apihook["Victim module"].drop_duplicates().values.tolist(), axis=1)
                df_prefetch["Function"] = df_prefetch.apply(lambda df_prefetch: df_apihook["Function"].drop_duplicates().values.tolist(), axis=1)
                # df_prefetch["Hooking address"] = df_prefetch.apply(lambda df_prefetch: df_apihook["Hook address"].drop_duplicates().values.tolist(), axis=1)
                df_prefetch["Hooking module"] = df_prefetch.apply(lambda df_prefetch: df_apihook["Hooking module"].drop_duplicates().values.tolist(), axis=1)
            else:
                pass
        else:
            pass
        if os.path.exists('/Users/koyko/Documents/memArtefact/ssdt.csv'):
            ssdt_list = []
            for ssdt in open("/Users/koyko/Documents/memArtefact/ssdt.csv"):
                csv_row2 = ssdt.splitlines()
                if "UNKNOWN" not in str(csv_row2):
                    index_start1 = str(csv_row2).find("(")
                    ssdt_list.append(str(csv_row2)[index_start1:].replace("']", ""))
            df_prefetch["SSDT"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame(ssdt_list).drop_duplicates().values.tolist(),
                                                        axis=1)  # many irrelevant data
        svcscan_list = []
        samePPID_svcscan = []
        if os.path.exists('/Users/koyko/Documents/memArtefact/svcscan.txt'):
            with open('/Users/koyko/Documents/memArtefact/svcscan.txt', 'r') as r:
                lineSVC = r.read()
            index_startSVC = [match.start() for match in re.finditer("Offset", lineSVC)]
            index_svc = lineSVC.find("Process ID: " + self.pid)
            if self.child_pslist:
                for ch in self.child_pslist:
                    if ch in lineSVC:
                        samePPID_svcscan.append(lineSVC.find("Process ID: " + ch))
            offset_index = 0
            for counter in range(len(index_startSVC)):
                if 100 < index_startSVC[counter]-index_svc < 300:
                    offset_index = counter
                    svcscan_list.append(lineSVC[index_startSVC[offset_index-1]:index_startSVC[offset_index]].strip().replace("\n", ","))
                if samePPID_svcscan:
                    for id in samePPID_svcscan:
                        if 100 < index_startSVC[counter] - id < 300:
                            offset_index = counter
                            svcscan_list.append(
                                lineSVC[index_startSVC[offset_index - 1]:index_startSVC[offset_index]].strip().replace("\n", ","))
                else:
                    pass
        else:
            pass
        df_prefetch["Service Scan"] = df_prefetch.apply(lambda df_prefetch: pd.DataFrame(svcscan_list).values, axis=1)
        df_prefetch.to_csv('/Users/koyko/Documents/hybrid.csv', index=False)
