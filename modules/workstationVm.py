import subprocess
import os
import time
import pathlib
#import winreg

#vmrunExe = "/usr/bin/vmrun"
vmrunExe = '/Applications/VMware Fusion.app/Contents/Library/vmrun'
vmPath = "/Users/koyko/"


class workstationServer:

    def __init__(self, ip):
        self.hostVMIP = ip
        self.vmUsername = "koyko"
        self.vmPassword = "admin123"
        #self.vmUsername = "remnux"
        #self.vmPassword = "malware"
        self.vmList = []
        self.vmName = []
        self.snapshotList = []
        self.revertSnapshots = []

    def enumerateVms(self, negFilter=None):
        for root, dirs, files in os.walk(vmPath):
            for file in files:
                if file.endswith(".vmx"):
                    if negFilter != None and negFilter.upper() in root.upper():
                        continue
                    else:
                        self.vmList.append(os.path.join(root, file))
        return self.vmList

    def waitForVmsToBoot(self, vmList):
        # apt_shared.logMsg("WAITING FOR VMS TO BE READY; THIS COULD TAKE A FEW MINUTES")
        readyVms = []
        ipAddressesSet = False
        while not ipAddressesSet:
            ipAddressesSet = True
            for i in vmList:
                if i not in readyVms:
                    if i.queryVmIp():
                        # apt_shared.logMsg(i.vmName + " READY; IP = " + i.getVmIp())
                        readyVms.append(i)
                    else:
                        ipAddressesSet = False
                time.sleep(1)
        # apt_shared.logMsg("VMS APPEAR TO BE READY; PULLING IP ADDRESSES TO VERIFY")
        # for i in vmList:
        # apt_shared.logMsg("IP ADDRESS FOR " + i.vmName + " = " + i.getVmIp())
        return True

    def getVmName(self):
        for vm in self.enumerateVms():
            self.vmName.append(str(vm).split('/')[-1][:-4])
        return self.vmName

    def getArch(self):
        for vmName in self.getVmName():
            if 'x64' in vmName:
                arch = 'x64'
            elif 'x86' in vmName:
                arch = 'x86'
            else:
                arch = None
        return arch

    def runVmCommand(self, listCmd):
        vmRunCmd = [vmrunExe] + listCmd
        vmrunProc = subprocess.Popen(vmRunCmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return vmrunProc.stdout

    def queryVmIp(self):
        # for vm in self.enumerateVms():
        return self.runVmCommand(['getGuestIPAddress', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx'])[
            0].strip()

    def getUsername(self):
        return self.vmUsername

    def enabledShare(self):
        return self.runAuthenticatedVmCommand(
            ['enableSharedFolders', "/home/koyko/vmware/remnux-6.0/remnux-6.0.vmx"])

    def addeShared(self):
        return self.runAuthenticatedVmCommand(
            ['addSharedFolder', "/home/koyko/vmware/remnux-6.0/remnux-6.0.vmx", "/mnt/hgfs/Malware_Result/"])

    def runAuthenticatedVmCommand(self, listcmd):
        vmRunCmd = [vmrunExe] + ['-gu', self.vmUsername, '-gp', self.vmPassword] + listcmd
        vmrunProc = subprocess.Popen(vmRunCmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return vmrunProc.communicate()

    def getFileFromGuest(self, srcPathName, dstPathName):  # "C:\\Users\\koyko\\Desktop", "/home/koyko/Desktop"
        if "Prefetch" in srcPathName:
            dstPathName += "_Prefetch"
        elif "winevt" in srcPathName:
            dstPathName += "_WinEVT"
        elif "Windows\\Temp" in srcPathName:
            dstPathName += "_SysTemp"
        elif "Windows Defender\\Support" in srcPathName:
            dstPathName += "_" + str(srcPathName.split('\\')[-2:-1])
        elif "regback" in srcPathName:
            dstPathName += "_Registry"
        elif "ActivityCache" in srcPathName:
            dstPathName += "_ActivityC"
        elif "Recent" in srcPathName:
            dstPathName += "_JumpList"
        elif "Temp" in srcPathName:
            dstPathName += "_UsrTemp"
        elif "Noriben_report" in srcPathName:
            dstPathName += "_NoribenReport"
        elif "Start Menu" in srcPathName:
            dstPathName += "_LNK"
        elif "DumpFiles" in srcPathName:
            dstPathName += "_DumpDMP"
        return self.runAuthenticatedVmCommand(
            ['CopyFileFromGuestToHost', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx', srcPathName,
             dstPathName])

    def deleteSnapshot(self, snapshotName):
        return self.runVmCommand(
            ['deleteSnapshot', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx', snapshotName])

    def getSnapshots(self):
        # apt_shared.logMsg("FINDING SNAPSHOTS FOR " + self.vmName)
        self.snapshotList = self.runVmCommand(['listSnapshots', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx'])[0]
        # strip off newlines
        #self.snapshotList = list(map(lambda s: s.strip(), self.snapshotList))
        return str(self.snapshotList, "utf-8")

    def makeDirOnGuest(self, dirPath):
        return self.runAuthenticatedVmCommand(
            ['createDirectoryInGuest', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx', dirPath])

    def powerOn(self):
        self.runVmCommand(['start', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx'])
        #self.runVmCommand(['start', "/home/koyko/vmware/remnux-6.0/remnux-6.0.vmx"])

    def powerOff(self):
        self.runVmCommand(['stop', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx'])
        #self.runVmCommand(['start', "/home/koyko/vmware/remnux-6.0/remnux-6.0.vmx"])

    def suspendVM(self):
        self.runVmCommand(['suspend', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx'])

    def resetVM(self):
        self.runVmCommand(['reset', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx'])

    def prepVm(self):
        # apt_shared.logMsg("PREPARING " + self.vmName + " FOR TESTING")
        # apt_shared.logMsg(self.vmName + " ARCHITECTURE: " + str(self.getArch()))
        self.getSnapshots()
        self.powerOn()

    def revertToSnapshot(self, snapshot):
        return self.runAuthenticatedVmCommand(['revertToSnapshot', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx', snapshot])
        # When call revertToSnapshot, it may mess the vmware's vmx file, the Vmware may refuse
        #    to start. If this is the case, edit your vmx file, remove the following line:
        #        checkpoint.vmState = "foo-SnapshotXX.vmsn"
        #    edit vmx file:
        #        ide0:0.fileName = "foo-XXXXX.vmdk"
        #    to the original disk file
        #        ide0:0.fileName = "foo.vmdk"

    def revertDevVm(self):
        self.getSnapshots()
        for i in self.snapshotList:
            if "TESTING-" in i:
                self.revertToSnapshot(i)
                self.deleteSnapshot(i)

    def revertToTestingBase(self):
        self.getSnapshots()
        for i in self.snapshotList:
            if 'testing_base' in i.lower():
                return self.revertToSnapshot(i)
        return "NO SUCH SNAPSHOT"

    def runCmdOnGuest(self, argList):
        # apt_shared.logMsg("RUNNING '" + ' '.join(argList) + "' ON " + self.vmName)
        self.runAuthenticatedVmCommand(
           ['runProgramInGuest', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx'] + argList)
        #self.runAuthenticatedVmCommand(['runProgramInGuest', "/home/koyko/vmware/remnux-6.0/remnux-6.0.vmx"] + argList)

        #retVal = False
        #if ('', '') == cmdRet:
            # apt_shared.logMsg(' '.join(argList) + "' ON " + self.vmName + " COMPLETED SUCCESSFULLY")
            #retVal = True
        # else:
        #     apt_shared.logMsg(' '.join(argList) + "' ON " + self.vmName + " FAILED TO RUN: " + str(cmdRet))
        #modes = {"n": "-noWait",
             #    "a": "-activeWindow",
           #      "i": "-interactive"}

        #if modes.has_key(mode):
            #return self.vmrun('runProgramInGuest', modes[mode], program, *para)
        #else:
            #return "error mode : %s" % mode
        #self.captureScreen()
        #return retVal

    def runScript(self):
        self.runAuthenticatedVmCommand(['runScriptInGuest', "/home/koyko/vmware/Windows 10 x64/Windows 10 x64.vmx", "/bin/bash python3 /home/remnux/Documents/NoribenRead.py /mnt/hgfs/Malware_Result/Result_Noriben.zip"])
          #source legacy / bin / activate & & && app-mem-dumper /mnt/hgfs/Malware_Result/memory_emolet.dmp && deactivate


    def takeSnapshot(self):
        snapshotName = "malware-test" # str(time.time()).split('.')[0]
        self.runVmCommand(['snapshot', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx', snapshotName])
        self.revertSnapshots.append(snapshotName)

    def renameFileInGuest(self, original_name, new_name, quiet=False):
        return self.runAuthenticatedVmCommand(['renameFileInGuest', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx', original_name, new_name])

    def updateProcList(self):
        return self.runAuthenticatedVmCommand(['listProcessesInGuest', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx'])[0]

    def uploadFileToGuest(self, srcPathName, dstPathName):
        # apt_shared.logMsg("ATTEMPTING TO UPLOAD " + srcPathName)
        return self.runAuthenticatedVmCommand(
           ['CopyFileFromHostToGuest', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx', srcPathName, dstPathName])


    def captureScreen(self, path_on_host):
        return self.runAuthenticatedVmCommand(['captureScreen', '/Users/koyko/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx', path_on_host])

    """ 
    def getRegistry(self):
        winreg.read_key('HKEY_CURRENT_USER\SOFTWARE')
        #reg.read_value()
        winreg.close()
    """
# ref: https://github.com/amedina/vmrun-python/blob/master/vmrun.py
# ref: https://www.vmware.com/pdf/vix160_vmrun_command.pdf
# ref: https://www.atrixnet.com/autostart-vmware-virtual-machines-on-boot-in-linux/