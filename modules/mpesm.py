#
# mpesm (Mnemonic PE Signature Matching)
# Copyright Bit9, Inc. 2015
#
def tapered_levenshtein(s1, s2):
    max_len = float(max(len(s1), len(s2)))
    if len(s1) < len(s2):
        return tapered_levenshtein(s2, s1)

    # len(s1) >= len(s2)
    if len(s2) == 0:
        return len(s1)

    previous_row = range(len(s2) + 1)
    for i, c1 in enumerate(s1):
        current_row = [i + 1]
        for j, c2 in enumerate(s2):
            taper = 1.0 - min(i, j) / max_len
            insertions = previous_row[
                             j + 1] + taper  # j+1 instead of j since previous_row and current_row are one character longer
            deletions = current_row[j] + taper  # than s2
            substitutions = previous_row[j] + (c1 != c2) * taper
            current_row.append(min(insertions, deletions, substitutions))
        previous_row = current_row

    return previous_row[-1]

def get_result(pe, strings_match, disassembler):
    BYTES = 2000
    NUM_MNEM = 30
    THRESHOLD = .85
    for sign in strings_match:
        m = disassembler
        if m and m[0] == sign or THRESHOLD < .7:
            m = disassembler[:NUM_MNEM]
            distance = tapered_levenshtein(sign, m)
            similarity = 1.0 - distance / float(max(len(sign), len(m)))
            if similarity > THRESHOLD:
                print("(Edits: %s | Similarity: %0.3f) (%s)" % (distance, similarity))
            else:
                print("(Edits: %s | Similarity: %0.3f) (%s)" % (distance, similarity))
