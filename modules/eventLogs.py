import pandas as pd
import Evtx.Evtx as evtx
from Evtx.Views import evtx_file_xml_view
import xml.etree.ElementTree as etree
import os
import csv
import re
import numpy as np

def eventParser(appEvent):
    event_4103 = {}
    event_1116 = {}
    event_1117 = {}
    event_1006 = {}
    event_600 = {}
    event_104 = {}
    event_4625 = {}
    event_4624 = {}
    event_4688 = {}
    event_4689 = {}
    event_4697 = {}
    event_4673 = {}
    event_4674 = {}
    event_4732 = {}
    event_4799 = {}
    event_4720 = {}
    event_4722 = {}
    event_4724 = {}
    event_4726 = {}
    event_4738 = {}
    event_4740 = {}
    event_4672 = {}
    event_5859 = {}
    event_4657 = {}
    event_4663 = {}
    event_7040 = {}
    event_4817 = {}
    event_4670 = {}
    event_5156 = {}
    event_5058 = {}
    event_5061 = {}
    event_1100 = {}
    event_1102 = {}
    event_5031 = {}
    event_4104 = {}
    with open("/Users/koyko/Documents/eventLogs_4103.csv", "w") as f:
        csvWriter = csv.DictWriter(f, fieldnames=["TimeCreated", "Correlation ActivityID", "Execution",
                                                  "ContextInfo", "UserData", "Payload"])
        csvWriter.writeheader()
    with open("/Users/koyko/Documents/eventLogs_4104.csv", "w") as f:
        csvWriter1 = csv.DictWriter(f,
                                    fieldnames=["TimeCreated", "Correlation ActivityID", "Execution",
                                                "MessageNumber", "MessageTotal", "ScriptBlockText", "ScriptBlockId",
                                                "Path"])
        csvWriter1.writeheader()
    with open("/Users/koyko/Documents/eventLogs_4625.csv", "w") as f:
        csvWriter2 = csv.DictWriter(f,
                                    fieldnames=["TimeCreated", "Execution",
                                                "Channel", "param1", "param2", "param3"])
        csvWriter2.writeheader()
    with open("/Users/koyko/Documents/eventLog_600.csv", "w") as f:
        csvWriter3 = csv.DictWriter(f,
                                    fieldnames=["EventID", "TimeCreated", "Channel"])
        csvWriter3.writeheader()
    with open("/Users/koyko/Documents/eventLog_7040.csv", "w") as f:
        csvWriter4 = csv.DictWriter(f,
                                    fieldnames=["TimeCreated", "Execution",
                                                "Channel", "param1", "param2", "param3", "param4"])
        csvWriter4.writeheader()
    with open("/Users/koyko/Documents/eventLog_4672.csv", "w") as f:
        csvWriter5 = csv.DictWriter(f,
                                    fieldnames=["TimeCreated", "Execution",
                                                "Channel", "SubjectUserSid", "SubjectUserName", "SubjectDomainName", "SubjectLogonId", "PrivilegeList"])
        csvWriter5.writeheader()
    with open("/Users/koyko/Documents/eventLog_7045.csv", "w") as f:
        csvWriter5 = csv.DictWriter(f,
                                    fieldnames=["EventID", "TimeCreated", "Execution",
                                                "Channel", "ServiceName", "ImagePath", "ServiceType", "StartType", "AccountName"])
        csvWriter5.writeheader()
    with open("/Users/koyko/Documents/eventLog_4624.csv", "w") as f:
        csvWriter6 = csv.DictWriter(f,
                                    fieldnames=["TimeCreated", "Execution",
                                                "Channel", "SubjectUserSid", "SubjectUserName", "SubjectDomainName", "SubjectLogonId", "TargetUserSid",
                                                "TargetUserName", "TargetDomainName", "TargetLogonId", "LogonType", "LogonProcessName",
                                                "AuthenticationPackageName", "WorkstationName", "LogonGuid", "TransmittedServices",
                                                "LmPackageName", "KeyLength", "ProcessId", "ProcessName", "IpAddress", "IpPort",
                                                "ImpersonationLevel", "RestrictedAdminMode", "TargetOutboundUserName",
                                                "TargetOutboundDomainName", "VirtualAccount", "TargetLinkedLogonId", "ElevatedToken"])
        csvWriter6.writeheader()
    with open("/Users/koyko/Documents/eventLog_1116.csv", "w") as f:
        csvWriter7 = csv.DictWriter(f,
                                    fieldnames=["EventID", "TimeCreated", "Execution",
                                                "Channel", "Product Name", "Product Version", "DetectionID",
                                                "Detection Time",  "Unused", "Unused2", "ThreatID",
                                                "Threat Name", "SeverityID", "Severity Name", "CategoryID",
                                                "Category Name","FWLink", "Status Code","Status Description", "State","Source ID","Source Name","Process Name",
                                                "Detection User", "Unused3","Path"])
        csvWriter7.writeheader()
    for eventF in appEvent:
        with evtx.Evtx(eventF) as log:
            print("Processing event filename: " + eventF.split("/")[-1])
            for record in log.records():
                root = etree.fromstring(record.xml())
                if root[0][1].text == "1116" or root[0][1].text == "1117":  # Antimalware platform performed an action to protect your system from malware
                    event_1116[str(root[0][1].text)] = [str(root[0][1].text), str(root[0][7].attrib)[16:-9], str(root[0][10].attrib),
                                                        str(root[0][11].text)]
                    for rec in root[1]:
                        try:
                            event_1116[str(root[0][1].text)].append(str(rec.text))
                        except IndexError:
                            pass
                    with open("/Users/koyko/Documents/eventLog_1116.csv", 'a') as file:
                        csv_out = csv.writer(file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
                        for k, v in event_1116.items():
                            row = [v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8], v[9], v[10], v[11], v[12],
                                   v[13], v[14], v[15], v[16], v[17], v[18], v[19], v[20], v[21], v[22], v[23], v[24]]
                        csv_out.writerow(row)
                elif root[0][
                    1].text == "1006":  # Antimalware engine found malware or other potentially unwanted software
                    event_1006.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_1006.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_1006]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_1006.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4103" or root[0][1].text == "4100":
                    event_4103[str(root[0][1].text)] = [str(root[0][7].attrib)[16:-9], str(root[0][9].attrib),
                                                        str(root[0][10].attrib)]
                    for rec in root[1]:
                        try:
                            event_4103[str(root[0][1].text)].append(str(rec.text))
                        except IndexError:
                            pass
                    with open("/Users/koyko/Documents/eventLogs_4103.csv", 'a') as file:
                        csv_out = csv.writer(file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
                        for k, v in event_4103.items():
                            row = [v[0], v[1], v[2], v[3], v[4], v[5]]
                        csv_out.writerow(row)
                elif root[0][1].text == "4104":
                    event_4104[str(root[0][1].text)] = [str(root[0][7].attrib)[16:-9], str(root[0][9].attrib),
                                                        str(root[0][10].attrib)]
                    for rec in root[1]:
                        try:
                            event_4104[str(root[0][1].text)].append(str(rec.text))
                        except IndexError:
                            pass
                    with open("/Users/koyko/Documents/eventLogs_4104.csv", 'a') as file:
                        csv_out = csv.writer(file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
                        for k, v in event_4104.items():
                            row = [v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]]
                        csv_out.writerow(row)
                elif root[0][1].text == "400" or root[0][1].text == "403" or root[0][
                    1].text == "800" or root[0][1].text == "600" or root[0][1].text == "5859" or root[0][1].text == "5860" or root[0][
                    1].text == "5861":  # WMI activity:  # 200,500,501 Powershell log
                    event_600.update({"EventID": str(root[0][1].text), "TimeCreated": str(root[0][5].attrib)[16:-9],
                                      "Channel": str(root[0][7].text)})
                    for rec in root[1]:
                        try:
                            event_600.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_600]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_600.csv", header=False, index=False, mode="a")
                elif root[0][
                    1].text == "104":  # SYSTEM Log – The “Windows PowerShell” or “PowerShell Operational” log was cleared
                    event_104.update({"EventID": str(root[0][1].text), "TimeCreated": str(root[0][5].attrib)[16:-9],
                                      "Channel": str(root[0][7].text)})
                    for rec in root[1]:
                        try:
                            event_104.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_104]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_104.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4625":
                    event_4625.update(
                        {"TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4625.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4625]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLogs_4625.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4624":  # successful account logon
                    event_4624.update(
                        {"TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4624.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4624]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4624.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4688":  # process creation with process command line
                    event_4688.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4688.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4688]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4688.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4689":  # process termination
                    event_4689.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text),
                         "ProcessId": str(root[1][5].text),
                         "ProcessName": str(root[1][6].text), "ExitStatus": str(root[1][7].text)})
                    for rec in root[1]:
                        try:
                            event_4689.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4689]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4689.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4697" or root[0][
                    1].text == "7045":  # service was installed in the system log
                    event_4697.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4697.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4697]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_7045.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4673":  # a privileged service was called
                    event_4673.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4673.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4673]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4673.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4674":  # an operation was attempted on a priviledged object
                    event_4674.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4674.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4674]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4674.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4732":  # A member was added to a security-enabled local group
                    event_4732.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4732.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4732]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4732.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4799" or root[0][
                    1].text == "4798":  # A security-enabled local group membership was enumerated
                    event_4799.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4799.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4799]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4799.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4720":  # A user account was created
                    event_4720.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4720.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4720]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4720.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4722":  # user account was activated
                    event_4722.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4722.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4722]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4722.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4724":  # attempt was made to reset password for another account
                    event_4724.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4724.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4724]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4724.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4726":  # A user account was deleted
                    event_4726.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4726.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4726]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4726.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4738":  # user account was modified
                    event_4738.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4738.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4738]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4738.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4740":  # A user account was locked out
                    event_4740.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4740.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4740]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4740.csv", header=False, index=False, mode="a")

                elif root[0][1].text == "4672":  # Assignment of new privileges to new logon
                    event_4672.update(
                        {"TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4672.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4672]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4672.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4657":  # network connection, registry change
                    event_4657.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4657.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4657]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4657.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4663":  # file creation attempt was made to access an object
                    event_4663.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4663.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4663]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4663.csv", header=False, index=False, mode="a")
                elif root[0][
                    1].text == "7040":  # Service was changed from disabled to autostart or demand start to autostart or autostart to demand start
                    event_7040.update(
                        {"TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_7040.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_7040]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_7040.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4817":
                    event_4817.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4817.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_4817]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4817.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "4670":
                    event_4670.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_4670.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame.from_dict([event_4670]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_4670.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "5156":  # Windows Filtering Platform has permitted a connection
                    event_5156.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_5156.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_5156]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_5156.csv", header=False, index=False, mode="a")

                elif root[0][1].text == "5058":  # Key File Operation/Windows Cryptographic Operation
                    event_5058.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_5058.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_5058]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_5058.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "5061":
                    event_5061.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_5061.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_5061]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_5061.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "1100":
                    event_1100.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_1100.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_1100]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_1100.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "1102":
                    event_1102.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(
                             root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_1102.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_1102]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_1102.csv", header=False, index=False, mode="a")
                elif root[0][1].text == "5031":
                    event_5031.update(
                        {"EventID": str(root[0][1].text), "TimeCreated": str(root[0][7].attrib)[16:-9],
                         "Execution": str(root[0][10].attrib), "Channel": str(root[0][11].text)})
                    for rec in root[1]:
                        try:
                            event_5031.update(
                                {str(rec.attrib).split(":")[1].strip("}").replace("'", ""): str(rec.text)})
                        except IndexError:
                            pass
                    df = pd.DataFrame([event_5031]).drop_duplicates()
                    df.to_csv("/Users/koyko/Documents/eventLog_5031.csv", header=False, index=False, mode="a")

    df_4103 = pd.read_csv("/Users/koyko/Documents/eventLogs_4103.csv", error_bad_lines=False)
    df_4104 = pd.read_csv("/Users/koyko/Documents/eventLogs_4104.csv", error_bad_lines=False)
    df_1116 = pd.read_csv("/Users/koyko/Documents/eventLog_1116.csv")
    if os.path.exists('/Users/koyko/Documents/prefetch.csv'):
        df2 = pd.read_csv("/Users/koyko/Documents/prefetch.csv")
        #df2["EventID"] = df2.apply(lambda df2: df_4103["EventID"].drop_duplicates().tolist(), axis=1)
        df2["Channel"] = df2.apply(lambda df2: df_1116["Channel"].drop_duplicates().values, axis=1)
        df2["Threat Name"] = df2.apply(lambda df2: df_1116["Threat Name"].drop_duplicates().values, axis=1)
        df2["SeverityID"] = df2.apply(lambda df2: df_1116["SeverityID"].drop_duplicates().values, axis=1)
        df2["Severity Name"] = df2.apply(lambda df2: df_1116["Severity Name"].drop_duplicates().values, axis=1)
        df2["CategoryID"] = df2.apply(lambda df2: df_1116["CategoryID"].drop_duplicates().values, axis=1)
        df2["Category Name"] = df2.apply(lambda df2: df_1116["Category Name"].drop_duplicates().values, axis=1)
        df2["Status Code"] = df2.apply(lambda df2: df_1116["Status Code"].drop_duplicates().to_list(), axis=1)
        df2["State"] = df2.apply(lambda df2: df_1116["State"].drop_duplicates().to_list(), axis=1)
        df2["SourceID"] = df2.apply(lambda df2: df_1116["Source ID"].drop_duplicates().values, axis=1)
        df2["Process Name"] = df2.apply(lambda df2: df_1116["Process Name"].drop_duplicates().values, axis=1)
        df2["Detection User"] = df2.apply(lambda df2: df_1116["Detection User"].drop_duplicates().values, axis=1)
        #df2["TimeCreated"] = df2.apply(lambda df2: df_4103["TimeCreated"].drop_duplicates().to_list(), axis=1)
        context_list = []
        scriptBlock = df_4104["ScriptBlockText"].drop_duplicates().tolist()
        function = []
        set_strictM = []
        others = []
        for scriptB in scriptBlock:
            if str(scriptB).lower().startswith("function") and "DisableRealtimeMonitoring" not in str(scriptB):
                function.append(str(scriptB).strip())
            elif "Set-StrictMode" in scriptB: #"Copyright", "Localized"
                set_strictM.append(str(scriptB).strip())
            else:
                others.append(str(scriptB).strip())
        df2["ScriptBlock_Function"] = df2.apply(lambda df2: pd.DataFrame(function).drop_duplicates().values.tolist(), axis=1)
        #df2["ScriptBlock_StrictMode"] = df2.apply(lambda df2: pd.DataFrame(set_strictM).drop_duplicates().values.tolist(), axis=1)
        #df2["ScriptBlock_Copyright"] = df2.apply(lambda df2: pd.DataFrame(copyright).values.tolist(), axis=1)
        #df2["ScriptBlock_Localized"] = df2.apply(lambda df2: pd.DataFrame(localized).values.tolist(), axis=1)
        #df2["ScriptBlock_others"] = df2.apply(lambda df2: pd.DataFrame(others).values.tolist(), axis=1)
        df2["Path"] = df2.apply(lambda df2: df_4104["Path"].drop_duplicates().tolist(), axis=1)
        for index, row in df_4103.iterrows():
            try:
                if "Host Application" in row["ContextInfo"] and "Set-MpPreference" not in row["ContextInfo"]:
                    context_list.append(df_4103["ContextInfo"].str.split("Host Application =").str.get(1).str.split("Engine Version").str.get(
                        0).tolist())
                #ContextInfo Host Application = C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe Set - MpPreference - DisableRealtimeMonitoring 0
            except:
                pass
        base64_PS = []
        context_hostApp = []
        base64_PS_join = []
        if context_list:
            for txt in context_list:
                if "ec" in str(txt):
                    base64_start = str(txt).find("ec") + 2
                    base64_end = str(txt).find("\n")
                    base64_string = str(txt)[base64_start:base64_end].strip()
                    base64_PS.append(base64_string)
                    context_hostApp.append(str(txt)[:base64_start].strip())
                else:
                    if "join" in str(txt).lower():
                        base64_start1 = str(txt).lower().find("('")
                        base64_end1 = str(txt).find("'-")
                        base64_string1 = str(txt)[base64_start1:base64_end1].strip()
                        base64_PS_join.append(base64_string1)
                        context_hostApp.append(str(txt)[:base64_start1].strip())
                    else:
                        context_hostApp.append(str(txt).strip())

            df2["ContextInfo_HostApp"] = df2.apply(lambda df2: pd.DataFrame(context_hostApp).drop_duplicates().values.tolist(), axis=1)
            df2["Base64_PS_EC"] = df2.apply(lambda df2: pd.DataFrame(base64_PS).values.tolist(), axis=1)
            df2["Base64_PS_Join"] = df2.apply(lambda df2: pd.DataFrame(base64_PS_join).values.tolist(), axis=1)
            df2["CommandName"] = df2.apply(lambda df2: list(
                    set(df_4103["ContextInfo"].str.split("Command Name =").str.get(1).str.split("\n").str.get(0).values.tolist())),
                                               axis=1)
            df2["CommandType"] = df2.apply(lambda df2: list(
                    set(df_4103["ContextInfo"].str.split("Command Type =").str.get(1).str.split("\n").str.get(0).values.tolist())),
                                               axis=1)
        if df_4103["Payload"].empty == False:
            payload = df_4103["Payload"].drop_duplicates().dropna().tolist()
            get_command = []
            add_type = []
            remove_item = []
            out_default = []
            invoke_expression = []
            set_strictmode = []
            for content in payload:
                if "MpPreference" not in content:
                    if "Get-Command" in content:
                        get_command.append(str(content).strip())
                    elif "Add-Type" in content:
                        add_type.append(str(content).strip())
                    elif "Remove-Item" in content:
                        remove_item.append(str(content).strip())
                    elif "Out-Default" in content:
                        out_default.append(str(content).strip())
                    elif "Invoke-Expression" in content:
                        invoke_expression.append(str(content).strip())
                    elif "Set-StrictMode" in content:
                        set_strictmode.append(str(content).strip())
                    else:
                        pass
            df2["Payload_Get-Command"] = df2.apply(lambda df2: pd.DataFrame(get_command).values.tolist(), axis=1)
            df2["Payload_Add-Type"] = df2.apply(lambda df2: pd.DataFrame(add_type).values.tolist(), axis=1)
            df2["Payload_Remove-Item"] = df2.apply(lambda df2: pd.DataFrame(remove_item).values.tolist(), axis=1)
            df2["Payload_Out-Default"] = df2.apply(lambda df2: pd.DataFrame(out_default).values.tolist(), axis=1)
            df2["Payload_Invoke-Expression"] = df2.apply(lambda df2: pd.DataFrame(invoke_expression).values.tolist(),
                                                             axis=1)
            df2["Payload_Set-StrictMode"] = df2.apply(lambda df2: pd.DataFrame(set_strictmode).values.tolist(), axis=1)
        else:
            pass
        df2.to_csv('/Users/koyko/Documents/prefetch.csv', index=False)

def parse_dir(dir):
    appEvent = []
    # ref: https://github.com/sans-blue-team/DeepBlueCLI
    for root, dir, files in os.walk(dir):
        for evtfile in files:
            tempFile = evtfile.split(".")[0]
            if re.fullmatch("Application", tempFile) or re.fullmatch("System",
                                                                             tempFile): #or re.fullmatch("Security", tempFile):
                appEvent.append(os.path.join(root, evtfile))
            elif re.findall("PowerShell", tempFile) or re.findall("Defender", tempFile) or re.findall(
                            "WMI", tempFile):
                appEvent.append(os.path.join(root, evtfile))
    eventParser(appEvent)  # remain preprocess only relevant data
